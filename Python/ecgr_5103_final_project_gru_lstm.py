# -*- coding: utf-8 -*-
"""ECGR-5103-Final-Project-GRU/LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Oe1X2VfftDJnAnCghXgGJTBYqeKu7Sng

## **ECGR 5106 Final Project - Real Time Stock Price Prediction (Using LSTM and GRU)**

# Load Necessary Libraries
"""

# Importing the libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, GRU
from tensorflow.keras.optimizers import SGD

from pandas_datareader.data import DataReader

# Code Snippet to Ignore Warnings
import warnings
warnings.simplefilter("ignore")

# Code Snippet to Use "Seaborn" Style for Plotting
import matplotlib.pyplot as plt
plt.style.use('seaborn')

"""# Define Global Variables:"""

start = datetime(1984, 9, 7)
end = datetime(2017, 11, 10)

tstart = 1970
tend = 2015

window_size = 60
features = 1

"""# Define Global Functions:"""

def train_test_plot(dataset, tstart, tend, company):
    dataset.loc[f"{tstart}":f"{tend}", "High"].plot(figsize=(16, 4), legend=True)
    dataset.loc[f"{tend+1}":, "High"].plot(figsize=(16, 4), legend=True)
    plt.legend([f"Train (Before {tend+1})", f"Test ({tend+1} and beyond)"])
    plt.title(company + "'s Stock Histroy")
    plt.show()

def train_test_split(dataset, tstart, tend):
    train = dataset.loc[f"{tstart}":f"{tend}", "High"]
    test = dataset.loc[f"{tend+1}":, "High"]
    return train, test

def train_test_split_values(dataset, tstart, tend):
    train, test =  train_test_split(dataset, tstart, tend)
    return train.values, test.values

def split_sequence(sequence, window):
    X, y = list(), list()
    for i in range(len(sequence)):
        end_ix = i + window
        if end_ix > len(sequence) - 1:
            break
        seq_x, seq_y = sequence[i:end_ix], sequence[end_ix]
        X.append(seq_x)
        y.append(seq_y)
    return np.array(X), np.array(y)

def plot_predictions(test, predicted):
    plt.plot(test, color="gray", label="Real")
    plt.plot(predicted, color="red", label="Predicted")
    plt.title("Stock Price Prediction")
    plt.xlabel("Time")
    plt.ylabel("Stock Price")
    plt.legend()
    plt.show()

def return_rmse(test, predicted):
    rmse = np.sqrt(mean_squared_error(test, predicted))
    print("Root Mean Squared Error (RMSE) {:.2f}.".format(rmse))

"""# The LSTM Model:"""

# Custom Function Defined that trains and Plots the Predicted Results based on LSTM Model
def create_lstm(dataset):
    # Split the dataset
    training_set, test_set = train_test_split_values(dataset, tstart, tend)

    # Scaling the training set
    sc = MinMaxScaler(feature_range=(0, 1))
    training_set = training_set.reshape(-1, 1)
    training_set_scaled = sc.fit_transform(training_set)

    # Split and setup the training set
    X_train, y_train = split_sequence(training_set_scaled, window_size)
    X_train = X_train.reshape(X_train.shape[0],X_train.shape[1],features)

    # Create the LSTM model
    model_lstm = Sequential()
    model_lstm.add(LSTM(units=125, activation="tanh", input_shape=(window_size, features)))
    model_lstm.add(Dense(25))
    model_lstm.add(Dense(units=1))

    model_lstm.compile(optimizer='adam', loss='mse')
    model_lstm.fit(X_train, y_train, epochs=15, batch_size=32)

    model_lstm.summary()

    # Run some test predictions and plot the model
    dataset_total = dataset.loc[:,"High"]
    inputs = dataset_total[len(dataset_total) - len(test_set) - window_size :].values
    inputs = inputs.reshape(-1, 1)
    inputs = sc.transform(inputs)

    X_test, y_test = split_sequence(inputs, window_size)
    X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], features)
    predicted_stock_price = model_lstm.predict(X_test)
    predicted_stock_price = sc.inverse_transform(predicted_stock_price)
    y_test = sc.inverse_transform(y_test)

    plot_predictions(y_test,predicted_stock_price)

    return_rmse(y_test,predicted_stock_price)

"""# The GRU model:"""

# Custom function defined that trains and plots the Predicted Results based on GRU Model
def create_gru(dataset):
    # Split the dataset
    training_set, test_set = train_test_split_values(dataset, tstart, tend)

    # Scale the training set
    sc = MinMaxScaler(feature_range=(0, 1))
    training_set = training_set.reshape(-1, 1)
    training_set_scaled = sc.fit_transform(training_set)

    # Split and setup the training set
    X_train, y_train = split_sequence(training_set_scaled, window_size)
    X_train = X_train.reshape(X_train.shape[0],X_train.shape[1],features)

    # Create the LSTM model
    model_gru = Sequential()
    model_gru.add(GRU(units=125, activation="tanh", input_shape=(window_size, features)))
    model_gru.add(Dense(units=1))

    model_gru.compile(optimizer="adam", loss="mse")
    model_gru.fit(X_train, y_train, epochs=10, batch_size=32)

    model_gru.summary()

    # Run some test predictions and plot the model
    dataset_total = dataset.loc[:,"High"]
    inputs = dataset_total[len(dataset_total) - len(test_set) - window_size :].values
    inputs = inputs.reshape(-1, 1)
    inputs = sc.transform(inputs)

    X_test, y_test = split_sequence(inputs, window_size)
    X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], features)
    GRU_predicted_stock_price = model_gru.predict(X_test)
    GRU_predicted_stock_price = sc.inverse_transform(GRU_predicted_stock_price)
    y_test = sc.inverse_transform(y_test)

    plot_predictions(y_test, GRU_predicted_stock_price)

    return_rmse(y_test,GRU_predicted_stock_price)

"""Load the data:"""

# Loading the CSV File for Ford (Automobile Company)
csv_list = [
    "https://raw.githubusercontent.com/Ntambe25/Real-Time-Stock-Prediction/main/Data/ford.csv",
    "https://raw.githubusercontent.com/Ntambe25/Real-Time-Stock-Prediction/main/Data/tesla.csv",
    "https://raw.githubusercontent.com/Ntambe25/Real-Time-Stock-Prediction/main/Data/jp_morgan_chase.csv",
    "https://raw.githubusercontent.com/Ntambe25/Real-Time-Stock-Prediction/main/Data/wells_fargo.csv",
    "https://raw.githubusercontent.com/Ntambe25/Real-Time-Stock-Prediction/main/Data/coca_cola.csv"
]
labels = [
    "Ford",
    "Tesla",
    "JP Morgan & Chase",
    "Wells Fargo",
    "Coca-Cola"
]
dataframes = list()

for csv_item in csv_list:
    df = pd.read_csv(csv_item)

    df['Date'] = pd.to_datetime(df['Date'])
    df.set_index('Date', inplace=True)
    df = df.drop(['OpenInt'], axis=1)
    df['Company'] = pd.factorize(df['Company'])[0]

    dataframes.append(df)

index = 0
for df in dataframes:
    dataset = df
    train_test_plot(dataset,tstart,tend,labels[index])
    index += 1

"""## LSTM:

Ford:
"""

# Training the LSTM Model for Ford
dataset = dataframes[0]
create_lstm(dataset)

"""Tesla:"""

# Training the LSTM Model for Tesla
dataset = dataframes[1]
create_lstm(dataset)

"""JP Morgan & Chase:"""

# Training the LSTM Model for JP Morgan & Chase
dataset = dataframes[2]
create_lstm(dataset)

"""Wells Fargo:"""

# Training the LSTM Model for Wells Fargo
dataset = dataframes[3]
create_lstm(dataset)

"""Coca-Cola:"""

# Training the LSTM Model for Coca-Cola
dataset = dataframes[4]
create_lstm(dataset)

"""## GRU:

Ford:
"""

# Training the GRU Model for Ford
dataset = dataframes[0]
create_gru(dataset)

"""Tesla:"""

# Training the GRU Model for Tesla
dataset = dataframes[1]
create_gru(dataset)

"""JP Morgan & Chase:"""

# Training the GRU Model for JP Morgan & Chase
dataset = dataframes[2]
create_gru(dataset)

"""Wells Fargo:"""

# Training the GRU Model for Wells Fargo
dataset = dataframes[3]
create_gru(dataset)

"""Coca-Cola:"""

# Training the GRU Model for Coca-Cola
dataset = dataframes[4]
create_gru(dataset)

